# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2024, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Georg Brandl <g.brandl@gmx.net>, 2018
# Melia Lee <lixiuyu97@163.com>, 2020
# Lu <lu2github@gmail.com>, 2022
# cdarlint <cdarling@126.com>, 2024
# wendi cao <651645601@qq.com>, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 8.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-02 00:49+0000\n"
"PO-Revision-Date: 2018-06-26 15:58+0000\n"
"Last-Translator: wendi cao <651645601@qq.com>, 2024\n"
"Language-Team: Chinese (China) (https://app.transifex.com/sphinx-doc/teams/15434/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:4
msgid ":mod:`sphinx.ext.autodoc` -- Include documentation from docstrings"
msgstr "：模式：`sphinx.ext.autodoc`--包括来自docstrings的文档"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:12
msgid ""
"This extension can import the modules you are documenting, and pull in "
"documentation from docstrings in a semi-automatic way."
msgstr "这个插件可以导入正在编写文档的模块，并以半自动的方式从文档字符串中拉入文档。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:17
msgid ""
":mod:`~sphinx.ext.autodoc` **imports** the modules to be documented. If any "
"modules have side effects on import, these will be executed by ``autodoc`` "
"when :program:`sphinx-build` is run."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:21
msgid ""
"If you document scripts (as opposed to library modules), make sure that the "
"main routine is protected by an ``if __name__ == '__main__'`` condition."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:25
msgid ""
"For this to work, the docstrings must of course be written in correct "
"reStructuredText. You can then use all of the usual Sphinx markup in the "
"docstrings, and it will end up correctly in the documentation. Together with"
" hand-written documentation, this technique eases the pain of having to "
"maintain two locations for documentation, while at the same time avoiding "
"auto-generated-looking pure API documentation."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:33
msgid ""
"If you prefer `NumPy`_ or `Google`_ style docstrings over reStructuredText, "
"you can also enable the :mod:`napoleon <sphinx.ext.napoleon>` extension. "
":mod:`!napoleon` is a preprocessor that converts docstrings to correct "
"reStructuredText before ``autodoc`` processes them."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:43
msgid "Getting started"
msgstr "开始"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:47
msgid "Setup"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:49
msgid ""
"Activate the plugin by adding ``'sphinx.ext.autodoc'`` to the "
":confval:`extensions` list in :file:`conf.py`:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:61
msgid "Ensuring the code can be imported"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:63
msgid ""
":mod:`~sphinx.ext.autodoc` analyses the code and docstrings by introspection"
" after **importing the modules**. For importing to work, you have to make "
"sure that your modules can be found by Sphinx and that dependencies can be "
"resolved (if your module does ``import foo``, but ``foo`` is not available "
"in the python environment that Sphinx runs in, your module import will "
"fail)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:70
msgid "There are two ways to ensure this:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:72
msgid ""
"Use an environment that contains your package and Sphinx. This can e.g. be "
"your local development environment (with an editable install), or an "
"environment in CI in which you install Sphinx and your package. The regular "
"installation process ensures that your package can be found by Sphinx and "
"that all dependencies are available."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:78
msgid ""
"It is alternatively possible to patch the Sphinx run so that it can operate "
"directly on the sources; e.g. if you want to be able to do a Sphinx build "
"from a source checkout."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:82
msgid ""
"Patch :data:`sys.path` in :file:`conf.py` to include your source path. For "
"example if you have a repository structure with :file:`doc/conf.py` and your"
" package is at :file:`src/my_package`, then you should add the following to "
"your :file:`conf.py`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:94
msgid ""
"To cope with missing dependencies, specify the missing modules in the "
":confval:`autodoc_mock_imports` setting."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:99
msgid "Usage"
msgstr "如何使用"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:101
msgid ""
"You can now use the :ref:`autodoc-directives` to add formatted documentation"
" for Python code elements like functions, classes, modules, etc. For "
"example, to document the function ``io.open()``, reading its signature and "
"docstring from the source file, you'd write:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:110
msgid ""
"You can also document whole classes or even modules automatically, using "
"member options for the auto directives, like:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:119
msgid ""
"As a hint to autodoc extension, you can put a ``::`` separator between the "
"module name and the object name to let autodoc know the correct module, if "
"it is ambiguous:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:129
msgid "Marking objects as public or private"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:131
msgid ""
"autodoc considers a member private if its docstring contains ``:meta "
"private:`` in its :ref:`info-field-lists`. For example:"
msgstr ""
"如果某个成员的docstring在其：ref:`info field list`中包含“`:meta "
"private:`”，则autodoc将其视为私有成员。例如："

#: ../../sphinx/doc/usage/extensions/autodoc.rst:145
msgid ""
"autodoc considers a member public if its docstring contains ``:meta "
"public:`` in its :ref:`info-field-lists`, even if it starts with an "
"underscore. For example:"
msgstr ""
"如果某个成员的docstring在其：ref:`info field list`中包含“`:meta "
"public:``”，即使它以下划线开头，它也会认为它是公共的。例如："

#: ../../sphinx/doc/usage/extensions/autodoc.rst:160
msgid ""
"autodoc considers a variable member does not have any default value if its "
"docstring contains ``:meta hide-value:`` in its :ref:`info-field-lists`. "
"Example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:174
msgid "Doc comments and docstrings"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:176
msgid ""
"Python has no built-in support for docstrings for module data members or "
"class attributes. To allow documenting these, ``autodoc`` recognises a "
"special format of :ref:`comment <python:comments>` called a 'doc comment' or"
" 'documentation comment'."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:181
msgid ""
"These comments start with a colon and an optional space character, ``'#:'`` "
"or ``'#: '``. To be recognised, the comments must appear either on the same "
"line as the variable or on one or more lines before the variable. Multi-line"
" doc-comments must always  appear on the lines before the variable's "
"definition."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:188
msgid ""
"For example, all three of the following variables have valid doc-comments:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:202
msgid ""
"Alternatively, ``autodoc`` can recognise a docstring on the line immediately"
" following the definition."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:205
msgid ""
"In the the following class definition, all attributes have documentation "
"recognised by ``autodoc``:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:233
msgid "Directives"
msgstr "指令"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:235
msgid ""
":mod:`autodoc` provides several directives that are versions of the usual "
":rst:dir:`py:module`, :rst:dir:`py:class` and so forth. On parsing time, "
"they import the corresponding module and extract the docstring of the given "
"objects, inserting them into the page source under a suitable "
":rst:dir:`py:module`, :rst:dir:`py:class` etc. directive."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:244
msgid ""
"Just as :rst:dir:`py:class` respects the current :rst:dir:`py:module`, "
":rst:dir:`autoclass` will also do so. Likewise, :rst:dir:`automethod` will "
"respect the current :rst:dir:`py:class`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:250
msgid "Default directive options"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:252
msgid ""
"To make any of the options described below the default, use the "
":confval:`autodoc_default_options` dictionary in :file:`conf.py`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:255
msgid ""
"If using defaults for the ``:members:``, ``:exclude-members:``, ``:private-"
"members:``, or ``:special-members:`` options, setting the option on a "
"directive will override the default. Instead, to extend the default list "
"with the per-directive option, the list may be prepended with a plus sign "
"(``+``), as follows:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:269
msgid ""
"If using :confval:`autodoc_default_options`, the defaults can be disabled "
"per-directive with the negated form, :samp:`:no-{option}:` as an option of "
"the directive For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:281
msgid "Automatically document modules"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:285
msgid ""
"Document a module. By default, the directive only inserts the docstring of "
"the module itself:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:292
#: ../../sphinx/doc/usage/extensions/autodoc.rst:526
#: ../../sphinx/doc/usage/extensions/autodoc.rst:792
#: ../../sphinx/doc/usage/extensions/autodoc.rst:866
msgid "will produce source like this:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:300
#: ../../sphinx/doc/usage/extensions/autodoc.rst:534
msgid ""
"The directive can also contain content of its own, which will be inserted "
"into the resulting non-auto directive source after the docstring (but before"
" any automatic member documentation)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:304
#: ../../sphinx/doc/usage/extensions/autodoc.rst:538
#: ../../sphinx/doc/usage/extensions/autodoc.rst:878
msgid ""
"Therefore, you can also mix automatic and non-automatic member "
"documentation, as follows:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:317
#: ../../sphinx/doc/usage/extensions/autodoc.rst:567
#: ../../sphinx/doc/usage/extensions/autodoc.rst:844
#: ../../sphinx/doc/usage/extensions/autodoc.rst:894
msgid "Options"
msgstr "选项"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:321
msgid ""
"Do not generate an index entry for the documented module or any auto-"
"documented members."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:329
msgid ""
"Indicate platforms on which the module is available. This is identical to "
":rst:dir:`py:module`'s ``:platform:`` option."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:335
msgid ""
"A sentence describing the module's purpose. This is identical to "
":rst:dir:`py:module`'s ``:synopsis:`` option."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:343
msgid ""
"Mark a module as deprecated. This is identical to :rst:dir:`py:module`'s "
"``:deprecated:`` option."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:351
msgid "Do not use ``__all__`` when analysing the module to document."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:356
#: ../../sphinx/doc/usage/extensions/autodoc.rst:600
msgid "Options for selecting members to document"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:360
msgid "Generate automatic documentation for all members of the target module:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:367
msgid ""
"By default, ``autodoc`` only includes public members with a docstring or "
":ref:`doc-comment <doc-comment>` (``#:``). If ``__all__`` exists, it will be"
" used to define which members are public, unless the ``:ignore-module-all:``"
" option is set."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:372
#: ../../sphinx/doc/usage/extensions/autodoc.rst:615
msgid ""
"To only document certain members, an explicit comma-separated list may be "
"used as the argument to ``:members:``:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:383
#: ../../sphinx/doc/usage/extensions/autodoc.rst:626
msgid "Exclude the given names from the members to document. For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:397
msgid ""
"To prevent documentation of imported classes or functions, in an "
":rst:dir:`!automodule` directive with the ``members`` option set, only "
"module members where the ``__module__`` attribute is equal to the module "
"name given to ``automodule`` will be documented."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:402
msgid ""
"Set the ``imported-members`` option if you want to prevent this behavior and"
" document all available members."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:405
msgid ""
"Note that attributes from imported modules will not be documented, because "
"attribute documentation is discovered by parsing the source file of the "
"current module."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:414
msgid ""
"Generate automatic documentation for members of the target module that don't"
" have a docstring or doc-comment. For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:427
msgid ""
"Generate automatic documentation for private members of the target module. "
"This includes names with a leading underscore (e.g. ``_private``) and those "
"members explicitly marked as private with ``:meta private:``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:437
#: ../../sphinx/doc/usage/extensions/autodoc.rst:703
msgid ""
"To only document certain private members, an explicit comma-separated list "
"may be used as the argument to ``:private-members:``:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:447
#: ../../sphinx/doc/usage/extensions/autodoc.rst:475
#: ../../sphinx/doc/usage/extensions/autodoc.rst:741
msgid "The option can now take a comma-separated list of arguments."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:453
msgid ""
"Generate automatic documentation for special members of the target module, "
"also known as :ref:`\"dunder\" names <python:specialnames>`. This includes "
"all names enclosed with a double-underscore, e.g. ``__special__``:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:464
#: ../../sphinx/doc/usage/extensions/autodoc.rst:730
msgid ""
"To only document certain special members, an explicit comma-separated list "
"may be used as the argument to ``:special-members:``:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:479
#: ../../sphinx/doc/usage/extensions/autodoc.rst:745
msgid "Options for documented members"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:483
#: ../../sphinx/doc/usage/extensions/autodoc.rst:749
msgid ""
"Choose the ordering of automatically documented members (default: "
"``alphabetical``). This overrides the :confval:`autodoc_member_order` "
"setting."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:487
msgid "``alphabetical``: Use simple alphabetical order."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:489
msgid ""
"``groupwise``: Group by object type (class, function, etc), use alphabetical"
" order within groups."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:492
msgid ""
"``bysource``: Use the order of objects in the module's source. The "
"``__all__`` variable can be used to override this order."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:496
#: ../../sphinx/doc/usage/extensions/autodoc.rst:762
#: ../../sphinx/doc/usage/extensions/autodoc.rst:980
msgid ""
"Note that for source order, the module must be a Python module with the "
"source code available."
msgstr "请注意，对于源代码顺序，该模块必须是具有可用源代码的Python模块。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:500
#: ../../sphinx/doc/usage/extensions/autodoc.rst:766
msgid "Support the ``'bysource'`` option."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:506
msgid ""
"Enable the ``:show-inheritance:`` option for all members of the module, if "
"``:members:`` is enabled."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:513
msgid "Automatically document classes or exceptions"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:518
msgid ""
"Document a class. For exception classes, prefer ``autoexception``. By "
"default, the directive only inserts the docstring of the class itself:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:551
#: ../../sphinx/doc/usage/extensions/autodoc.rst:828
msgid "Advanced usage"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:552
#: ../../sphinx/doc/usage/extensions/autodoc.rst:829
msgid ""
"It is possible to override the signature for explicitly documented callable "
"objects (functions, methods, classes) with the regular syntax that will "
"override the signature gained from introspection:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:562
#: ../../sphinx/doc/usage/extensions/autodoc.rst:839
msgid ""
"This is useful if the signature from the method is hidden by a decorator."
msgstr "如果方法的签名被修饰符隐藏，这很有用。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:571
#: ../../sphinx/doc/usage/extensions/autodoc.rst:898
msgid ""
"Do not generate an index entry for the documented class or any auto-"
"documented members."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:579
msgid ""
"Select which docstring will be used for the main body of the directive. This"
" overrides the global value of :confval:`autoclass_content`. The possible "
"values are:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:583
msgid ""
"``class``: Only use the class's docstring. The :meth:`!__init__` method can "
"be separately documented using the ``:members:`` option or "
":rst:dir:`automethod`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:587
msgid "``init``: Only use the docstring of the :meth:`!__init__` method."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:589
msgid ""
"``both`` Use both, appending the docstring of the :meth:`!__init__` method "
"to the class's docstring."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:593
msgid ""
"If the :meth:`!__init__` method doesn't exist or has a blank docstring, "
"``autodoc`` will attempt to use the :meth:`!__new__` method's docstring, if "
"it exists and is not blank."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:604
msgid "Generate automatic documentation for all members of the target class:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:611
msgid ""
"By default, ``autodoc`` only includes public members with a docstring or "
":ref:`doc-comment <doc-comment>` (``#:``) that are attributes of the target "
"class (i.e. not inherited)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:640
msgid ""
"To generate automatic documentation for members inherited from base classes,"
" use the ``:inherited-members:`` option:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:649
msgid ""
"This can be combined with the ``:undoc-members:`` option to generate "
"automatic documentation for *all* available members of the class."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:652
msgid ""
"The members of classes listed in the argument to ``:inherited-members:`` are"
" excluded from the automatic documentation. This defaults to "
":py:class:`python:object` if no argument is provided, meaning that members "
"of the ``object`` class are not documented. To include these, use ``None`` "
"as the argument."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:658
msgid ""
"For example; If your class ``MyList`` is derived from ``list`` class and you"
" don't want to document ``list.__len__()``, you should specify a option "
"``:inherited-members: list`` to avoid special members of list class."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:664
msgid ""
"Should any of the inherited members use a format other than reStructuredText"
" for their docstrings, there may be markup warnings or errors."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:670
msgid ""
"``:inherited-members:`` now takes the name of a base class to exclude as an "
"argument."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:674
msgid "A comma separated list of base class names can be used."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:680
msgid ""
"Generate automatic documentation for members of the target class that don't "
"have a docstring or doc-comment. For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:693
msgid ""
"Generate automatic documentation for private members of the target class. "
"This includes names with a leading underscore (e.g. ``_private``) and those "
"members explicitly marked as private with ``:meta private:``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:713
msgid "The option can now take arguments."
msgstr "选项现在可以接受参数。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:719
msgid ""
"Generate automatic documentation for special members of the target class, "
"also known as :ref:`\"dunder\" names <python:specialnames>`. This includes "
"all names enclosed with a double-underscore, e.g. ``__special__``:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:753
msgid "``'alphabetical'``: Use simple alphabetical order."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:755
msgid ""
"``'groupwise'``: Group by object type (class, function, etc), use "
"alphabetical order within groups."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:758
msgid ""
"``'bysource'``: Use the order of objects in the module's source. The "
"``__all__`` variable can be used to override this order."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:772
msgid "Insert the class's base classes after the class signature."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:778
msgid "Automatically document function-like objects"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:785
msgid ""
"Document a function, method, property, or decorator. By default, the "
"directive only inserts the docstring of the function itself:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:800
#: ../../sphinx/doc/usage/extensions/autodoc.rst:874
msgid ""
"The directive can also contain content of its own, which will be inserted "
"into the resulting non-auto directive source after the docstring."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:804
msgid ""
"Therefore, you can also mix automatic and non-automatic documentation, as "
"follows:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:813
msgid ":rst:dir:`autodecorator`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:815
msgid ":rst:dir:`autoproperty`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:820
msgid ""
"If you document decorated functions or methods, keep in mind that "
"``autodoc`` retrieves its docstrings by importing the module and inspecting "
"the ``__doc__`` attribute of the given function or method. That means that "
"if a decorator replaces the decorated function with another, it must copy "
"the original ``__doc__`` to the new function."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:848
msgid "Do not generate an index entry for the documented function."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:854
msgid "Automatically document attributes or data"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:859
msgid ""
"Document a module level variable or constant ('data') or class attribute. By"
" default, the directive only inserts the docstring of the variable itself:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:887
msgid ""
":rst:dir:`autodata` and :rst:dir:`autoattribute` can now extract docstrings."
msgstr ":rst:方向：`自动数据`和：rst:方向：`自动属性`现在可以提取文档字符串。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:890
msgid "Doc-comments are now allowed on the same line of an assignment."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:908
msgid ""
"By default, ``autodoc`` attempts to obtain the type annotation and value of "
"the variable by introspection, displaying it after the variable's name. To "
"override this, a custom string for the variable's value may be used as the "
"argument to ``annotation``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:914
msgid ""
"For example, if the runtime value of ``FILE_MODE`` is ``0o755``, the "
"displayed value will be ``493`` (as ``oct(493) == '0o755'``). This can be "
"fixed by setting ``:annotation: = 0o755``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:918
msgid ""
"If ``annotation`` is used without arguments, no value or type hint will be "
"shown for the variable."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:925
msgid ""
"To display the type hint of the variable without a value, use the ``no-"
"value`` option. If both the ``annotation`` and ``no-value`` options are "
"used, ``no-value`` has no effect."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:932
msgid "Configuration"
msgstr "配置"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:934
msgid "There are also config values that you can set:"
msgstr "您还可以设置配置值："

#: ../../sphinx/doc/usage/extensions/autodoc.rst:938
msgid ""
"This value selects what content will be inserted into the main body of an "
":rst:dir:`autoclass` directive.  The possible values are:"
msgstr "此值选择将插入到主体的内容：rst:方向：`自动类`指令。可能的值为："

#: ../../sphinx/doc/usage/extensions/autodoc.rst:941
msgid "``\"class\"``"
msgstr "``\"类\"``"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:942
msgid ""
"Only the class' docstring is inserted.  This is the default.  You can still "
"document ``__init__`` as a separate method using :rst:dir:`automethod` or "
"the ``members`` option to :rst:dir:`autoclass`."
msgstr ""
"只插入类的文档字符串。这是默认值。您仍然可以使用以下方法将“`uuu "
"初始_u2;”作为单独的方法进行文档记录：rst:方向：`自动方法`或``成语那``选项用于：rst:方向：`自动类`。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:945
msgid "``\"both\"``"
msgstr "``\"都\"``"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:946
msgid ""
"Both the class' and the ``__init__`` method's docstring are concatenated and"
" inserted."
msgstr "类和方法的文档字符串都被连接并插入。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:948
msgid "``\"init\"``"
msgstr "``\"初始化\"``"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:949
msgid "Only the ``__init__`` method's docstring is inserted."
msgstr "只插入方法的文档字符串。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:953
msgid ""
"If the class has no ``__init__`` method or if the ``__init__`` method's "
"docstring is empty, but the class has a ``__new__`` method's docstring, it "
"is used instead."
msgstr ""
"如果类没有```unu 初始``方法，或者如果```u 初始_u``方法的文档字符串为空，但该类有一个```unu 新\\`方法的文档字符串，则改用它。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:961
msgid ""
"This value selects how the signature will be displayed for the class defined"
" by :rst:dir:`autoclass` directive.  The possible values are:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:964
msgid "``\"mixed\"``"
msgstr "``\"mixed\"``"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:965
msgid "Display the signature with the class name."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:966
msgid "``\"separated\"``"
msgstr "``\"separated\"``"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:967
msgid "Display the signature as a method."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:969
msgid "The default is ``\"mixed\"``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:975
msgid ""
"This value selects if automatically documented members are sorted "
"alphabetical (value ``'alphabetical'``), by member type (value "
"``'groupwise'``) or by source order (value ``'bysource'``).  The default is "
"alphabetical."
msgstr "此值选择自动记录的成员是按字母顺序排序（值为“字母”），是按成员类型（值为“集团化”）还是按源顺序排序（值为“按源”）。默认值为字母顺序。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:984
msgid "Support for ``'bysource'``."
msgstr "支持“bysource”。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:989
msgid ""
"This value is a list of autodoc directive flags that should be automatically"
" applied to all autodoc directives.  The supported flags are ``'members'``, "
"``'undoc-members'``, ``'private-members'``, ``'special-members'``, "
"``'inherited-members'``, ``'show-inheritance'``, ``'ignore-module-all'`` and"
" ``'exclude-members'``."
msgstr ""
"此值是自动应用于所有autodoc指令的autodoc指令标志的列表。受支持的标志是“'members'”、“'undoc-"
"members'”、“'private-members'”、“'special-members'”、“'inherited-"
"members'”、“'show-inheritation'”、“'ignore-module-all”和“exclude-members”`。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:999
msgid "Integrated into :confval:`autodoc_default_options`."
msgstr "集成到：confval:`autodoc_default_options`。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1003
msgid ""
"The default options for autodoc directives.  They are applied to all autodoc"
" directives automatically.  It must be a dictionary which maps option names "
"to the values.  For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1017
msgid ""
"Setting ``None`` or ``True`` to the value is equivalent to giving only the "
"option name to the directives."
msgstr "将“None”或“True”设置为值相当于只给指令指定选项名。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1020
msgid ""
"The supported options are ``'members'``, ``'member-order'``, ``'undoc-"
"members'``, ``'private-members'``, ``'special-members'``, ``'inherited-"
"members'``, ``'show-inheritance'``, ``'ignore-module-all'``, ``'imported-"
"members'``, ``'exclude-members'``, ``'class-doc-from'`` and ``'no-value'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1028
msgid "Accepts ``True`` as a value."
msgstr "接受“True”作为值。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1031
msgid "Added ``'imported-members'``."
msgstr "添加 ``'imported-members'``."

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1034
msgid "Added ``'class-doc-from'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1037
msgid "Added ``'no-value'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1042
msgid ""
"Functions imported from C modules cannot be introspected, and therefore the "
"signature for such functions cannot be automatically determined.  However, "
"it is an often-used convention to put the signature into the first line of "
"the function's docstring."
msgstr "从C模块导入的函数不能自省，因此不能自动确定这些函数的签名。但是，将签名放入函数的文档字符串的第一行是一个常用的约定。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1047
msgid ""
"If this boolean value is set to ``True`` (which is the default), autodoc "
"will look at the first line of the docstring for functions and methods, and "
"if it looks like a signature, use the line as the signature and remove it "
"from the docstring content."
msgstr ""
"如果此布尔值设置为“True”（默认值），自动文档将查看文档字符串的第一行以查找函数和方法，如果它看起来像签名，则使用该行作为签名，并将其从文档字符串内容中删除。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1052
msgid ""
"autodoc will continue to look for multiple signature lines, stopping at the "
"first line that does not look like a signature. This is useful for declaring"
" overloaded function signatures."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1059
msgid "Support overloaded signatures"
msgstr "支持重载签名"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1063
msgid "Overloaded signatures do not need to be separated by a backslash"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1067
msgid ""
"This value contains a list of modules to be mocked up. This is useful when "
"some external dependencies are not met at build time and break the building "
"process. You may only specify the root package of the dependencies "
"themselves and omit the sub-modules:"
msgstr "此值包含要模拟的模块列表。当某些外部依赖项在构建时不满足并中断构建过程时，这很有用。只能指定依赖项本身的根包，而忽略子模块："

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1076
msgid "Will mock all imports under the ``django`` package."
msgstr "将模拟“django”包下的所有导入。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1080
msgid ""
"This config value only requires to declare the top-level modules that should"
" be mocked."
msgstr "这个配置值只需要声明应该模拟的顶层模块。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1086
msgid ""
"This value controls how to represent typehints.  The setting takes the "
"following values:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1089
msgid "``'signature'`` -- Show typehints in the signature (default)"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1090
msgid ""
"``'description'`` -- Show typehints as content of the function or method The"
" typehints of overloaded functions or methods will still be represented in "
"the signature."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1093
msgid "``'none'`` -- Do not show typehints"
msgstr "``'none'`--不显示类型提示"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1094
msgid ""
"``'both'`` -- Show typehints in the signature and as content of the function"
" or method"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1097
msgid ""
"Overloaded functions or methods will not have typehints included in the "
"description because it is impossible to accurately represent all possible "
"overloads as a list of parameters."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1104
msgid "New option ``'description'`` is added."
msgstr "添加了新选项“description”。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1108
msgid "New option ``'both'`` is added."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1112
msgid ""
"This value controls whether the types of undocumented parameters and return "
"values are documented when ``autodoc_typehints`` is set to ``description``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1115
msgid ""
"The default value is ``\"all\"``, meaning that types are documented for all "
"parameters and return values, whether they are documented or not."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1118
msgid ""
"When set to ``\"documented\"``, types will only be documented for a "
"parameter or a return value that is already documented by the docstring."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1121
msgid ""
"With ``\"documented_params\"``, parameter types will only be annotated if "
"the parameter is documented in the docstring. The return type is always "
"annotated (except if it is ``None``)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1129
msgid "New option ``'documented_params'`` is added."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1133
msgid ""
"A dictionary for users defined `type aliases`__ that maps a type name to the"
" full-qualified object name.  It is used to keep type aliases not evaluated "
"in the document.  Defaults to empty (``{}``)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1137
msgid ""
"The type aliases are only available if your program enables :pep:`Postponed "
"Evaluation of Annotations (PEP 563) <563>` feature via ``from __future__ "
"import annotations``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1141
msgid "For example, there is code using a type alias:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1152
msgid ""
"If ``autodoc_type_aliases`` is not set, autodoc will generate internal mark-"
"up from this code as following:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1161
msgid ""
"If you set ``autodoc_type_aliases`` as ``{'AliasType': "
"'your.module.AliasType'}``, it generates the following document internally:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1176
msgid ""
"This value controls the format of typehints.  The setting takes the "
"following values:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1179
msgid ""
"``'fully-qualified'`` -- Show the module name and its name of typehints"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1180
msgid ""
"``'short'`` -- Suppress the leading module names of the typehints (e.g. "
"``io.StringIO`` -> ``StringIO``)  (default)"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1187
msgid "The default setting was changed to ``'short'``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1191
msgid ""
"If True, the default argument values of functions will be not evaluated on "
"generating document.  It preserves them as is in the source code."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1196
msgid ""
"Added as an experimental feature.  This will be integrated into autodoc core"
" in the future."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1201
msgid ""
"This value controls the behavior of :option:`sphinx-build --fail-on-warning`"
" during importing modules. If ``False`` is given, autodoc forcedly "
"suppresses the error if the imported module emits warnings.  By default, "
"``True``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1206
msgid ""
"This option now has no effect as :option:`!--fail-on-warning` no longer "
"exits early."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1212
msgid ""
"This value controls the docstrings inheritance. If set to True the docstring"
" for classes or methods, if not explicitly set, is inherited from parents."
msgstr "此值控制docstrings继承。如果设置为True，则类或方法的docstring（如果未显式设置）将从父级继承。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1216
msgid "The default is ``True``."
msgstr "默认值为真。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1223
msgid ""
":mod:`autodoc` supports to suppress warning messages via "
":confval:`suppress_warnings`.  It allows following warnings types in "
"addition:"
msgstr "：mod:`autodoc`支持通过：confval:`suppress_warnings`来取消警告消息。它还允许以下警告类型："

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1227
msgid "autodoc"
msgstr "autodoc"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1228
msgid "autodoc.import_object"
msgstr "autodoc.import_object"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1232
msgid "Docstring preprocessing"
msgstr "文档字符串预处理"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1234
msgid "autodoc provides the following additional events:"
msgstr "自动文档提供如下额外事件"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1240
msgid ""
"Emitted when autodoc has read and processed a docstring.  *lines* is a list "
"of strings -- the lines of the processed docstring -- that the event handler"
" can modify **in place** to change what Sphinx puts into the output."
msgstr ""
"当自动文档读取并处理文档字符串时发出。*lines*是一个字符串列表，即已处理的文档字符串的行，事件处理程序可以修改**就地**以更改Sphinx在输出中的内容。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:0
msgid "Parameters"
msgstr "参数"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1244
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1263
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1275
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1304
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1336
msgid "the Sphinx application object"
msgstr "sphinx应用目标"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1245
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1276
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1337
msgid ""
"the type of the object which the docstring belongs to (one of "
"``\"module\"``, ``\"class\"``, ``\"exception\"``, ``\"function\"``, "
"``\"method\"``, ``\"attribute\"``)"
msgstr "文档字符串所属对象的类型（“模块”、“类”、“异常”、“函数”、“方法”、“属性”之一）"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1248
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1279
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1305
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1340
msgid "the fully qualified name of the object"
msgstr "对象的完全限定名"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1249
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1264
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1280
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1306
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1341
msgid "the object itself"
msgstr "对象自身"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1250
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1281
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1344
msgid ""
"the options given to the directive: an object with attributes "
"``inherited_members``, ``undoc_members``, ``show_inheritance`` and ``no-"
"index`` that are true if the flag option of same name was given to the auto "
"directive"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1254
msgid "the lines of the docstring, see above"
msgstr "文档字符串的行，见上文"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1260
msgid ""
"Emitted before autodoc formats a signature for an object. The event handler "
"can modify an object to change its signature."
msgstr "在autodoc格式化对象的签名之前发出。事件处理程序可以修改对象以更改其签名。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1265
msgid "a boolean indicates an object is bound method or not"
msgstr "布尔值表示对象是否是绑定方法"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1271
msgid ""
"Emitted when autodoc has formatted a signature for an object. The event "
"handler can return a new tuple ``(signature, return_annotation)`` to change "
"what Sphinx puts into the output."
msgstr "当自动文档已格式化对象的签名时发出。事件处理程序可以返回一个新的元组`（签名，返回标记）``来更改Sphinx在输出中的内容。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1285
msgid ""
"function signature, as a string of the form ``\"(parameter_1, "
"parameter_2)\"``, or ``None`` if introspection didn't succeed and signature "
"wasn't specified in the directive."
msgstr "函数签名，如果自省未成功，并且指令中未指定签名，则为格式为“`”（参数_1，参数_2）”``或“无”形式的字符串。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1288
msgid ""
"function return annotation as a string of the form ``\" -> annotation\"``, "
"or ``None`` if there is no return annotation"
msgstr ""
"函数return annotation，格式为“—>annotation”`，如果没有return annotation，则返回“None”"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1291
msgid ""
"The :mod:`sphinx.ext.autodoc` module provides factory functions for commonly"
" needed docstring processing in event :event:`autodoc-process-docstring`:"
msgstr "：mod:`sphinx.ext.autodoc`模块提供工厂函数，用于在事件：事件:`自动文档处理文档字符串`:"

#: ../../../../../../../opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/sphinx/ext/autodoc/__init__.pydocstring
#: of sphinx.ext.autodoc.cut_lines:1
msgid ""
"Return a listener that removes the first *pre* and last *post* lines of "
"every docstring.  If *what* is a sequence of strings, only docstrings of a "
"type in *what* will be processed."
msgstr ""
"返回一个侦听器，它删除每个文档字符串的第一行*pre*行和最后一行*post*。如果*what*是字符串序列，则只处理*what*中类型的文档字符串。"

#: ../../../../../../../opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/sphinx/ext/autodoc/__init__.pydocstring
#: of sphinx.ext.autodoc.cut_lines:5
msgid "Use like this (e.g. in the ``setup()`` function of :file:`conf.py`)::"
msgstr "像这样使用（例如在file:file的``setup（）``函数中：`配置文件`)::"

#: ../../../../../../../opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/sphinx/ext/autodoc/__init__.pydocstring
#: of sphinx.ext.autodoc.cut_lines:10
msgid ""
"This can (and should) be used in place of :confval:`automodule_skip_lines`."
msgstr "这可以（也应该）代替：confval:`automodule_skip_lines`。"

#: ../../../../../../../opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/sphinx/ext/autodoc/__init__.pydocstring
#: of sphinx.ext.autodoc.between:1
msgid ""
"Return a listener that either keeps, or if *exclude* is True excludes, lines"
" between lines that match the *marker* regular expression.  If no line "
"matches, the resulting docstring would be empty, so no change will be made "
"unless *keepempty* is true."
msgstr ""
"返回一个侦听器，该侦听器保留或如果*exclude*为真，则排除与*marker*正则表达式匹配的行之间的行。如果没有行匹配，则生成的文档字符串将为空，因此除非*keepmpty*为真，否则不会进行任何更改。"

#: ../../../../../../../opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/site-packages/sphinx/ext/autodoc/__init__.pydocstring
#: of sphinx.ext.autodoc.between:6
msgid ""
"If *what* is a sequence of strings, only docstrings of a type in *what* will"
" be processed."
msgstr "如果*what*是字符串序列，则只处理*what*中类型的文档字符串。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1299
msgid ""
"Emitted when autodoc has read and processed a class to determine the base-"
"classes.  *bases* is a list of classes that the event handler can modify "
"**in place** to change what Sphinx puts into the output.  It's emitted only "
"if ``show-inheritance`` option given."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1307
msgid "the options given to the class directive"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1308
msgid "the list of base classes signature. see above."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1313
msgid ""
"``bases`` can contain a string as a base class name. It will be processed as"
" reStructuredText."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1318
msgid "Skipping members"
msgstr "跳过成员"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1320
msgid ""
"autodoc allows the user to define a custom method for determining whether a "
"member should be included in the documentation by using the following event:"
msgstr "自动文档允许用户定义一个自定义方法，通过使用以下事件确定是否应将成员包括在文档中："

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1327
msgid ""
"Emitted when autodoc has to decide whether a member should be included in "
"the documentation.  The member is excluded if a handler returns ``True``.  "
"It is included if the handler returns ``False``."
msgstr ""
"当自动文档必须决定是否应将成员包含在文档中时发出。如果处理程序返回“True”，则排除该成员。如果处理程序返回“False”，则会包含此函数。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1331
msgid ""
"If more than one enabled extension handles the ``autodoc-skip-member`` "
"event, autodoc will use the first non-``None`` value returned by a handler. "
"Handlers should return ``None`` to fall back to the skipping behavior of "
"autodoc and other enabled extensions."
msgstr ""
"如果多个已启用的扩展处理“自动文档跳过成员r”事件，自动文档将使用处理程序返回的第一个非“None”值。处理程序应返回“None”以返回自动文档和其他已启用扩展的跳过行为。"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1342
msgid ""
"a boolean indicating if autodoc will skip this member if the user handler "
"does not override the decision"
msgstr "一个布尔值，指示如果用户处理程序不重写决策，自动文档是否将跳过此成员"
