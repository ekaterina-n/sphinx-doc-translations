# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2024, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 8.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-14 00:43+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:6
msgid ":mod:`sphinx.ext.autodoc` -- Include documentation from docstrings"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:14
msgid "This extension can import the modules you are documenting, and pull in documentation from docstrings in a semi-automatic way."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:19
msgid ":mod:`~sphinx.ext.autodoc` **imports** the modules to be documented.  If any modules have side effects on import, these will be executed by ``autodoc`` when ``sphinx-build`` is run."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:23
msgid "If you document scripts (as opposed to library modules), make sure their main routine is protected by a ``if __name__ == '__main__'`` condition."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:26
msgid "For this to work, the docstrings must of course be written in correct reStructuredText.  You can then use all of the usual Sphinx markup in the docstrings, and it will end up correctly in the documentation.  Together with hand-written documentation, this technique eases the pain of having to maintain two locations for documentation, while at the same time avoiding auto-generated-looking pure API documentation."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:33
msgid "If you prefer `NumPy`_ or `Google`_ style docstrings over reStructuredText, you can also enable the :mod:`napoleon <sphinx.ext.napoleon>` extension. :mod:`napoleon <sphinx.ext.napoleon>` is a preprocessor that converts your docstrings to correct reStructuredText before :mod:`autodoc` processes them."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:42
msgid "Getting started"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:45
msgid "Setup"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:46
msgid "Activate the plugin by adding ``'sphinx.ext.autodoc'`` to the :confval:`extensions` in your :file:`conf.py`::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:55
msgid "Ensuring the code can be imported"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:57
msgid ":mod:`~sphinx.ext.autodoc` analyses the code and docstrings by introspection after importing the modules. For importing to work, you have to make sure that your modules can be found by Sphinx and that dependencies can be resolved (if your module does ``import foo``, but ``foo`` is not available in the python environment that Sphinx runs in, your module import will fail)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:63
msgid "There are two ways to ensure this:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:65
msgid "Use an environment that contains your package and Sphinx. This can e.g. be your local dev environment (with an editable install), or an environment in CI in which you install Sphinx and your package. The regular installation process ensures that your package can be found by Sphinx and that all dependencies are available."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:71
msgid "It is alternatively possible to patch the Sphinx run so that it can operate directly on the sources; e.g. if you want to be able to do a Sphinx build from a source checkout."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:75
msgid "Patch :data:`sys.path` in your Sphinx :file:`conf.py` to include the folder of your sources. E.g. if you have a repository structure with :file:`doc/conf.py` and your package is at :file:`src/mypackage`, then you should add::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:81
msgid "to your :file:`conf.py`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:83
msgid "To cope with missing dependencies, specify the missing modules in :confval:`autodoc_mock_imports`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:87
msgid "Usage"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:89
msgid "You can now use the :ref:`autodoc-directives` to add formatted documentation for Python code elements like functions, classes, modules, etc. For example, to document the function ``io.open()``, reading its signature and docstring from the source file, you'd write ::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:96
msgid "You can also document whole classes or even modules automatically, using member options for the auto directives, like ::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:105
msgid "Directives"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:107
msgid ":mod:`autodoc` provides several directives that are versions of the usual :rst:dir:`py:module`, :rst:dir:`py:class` and so forth.  On parsing time, they import the corresponding module and extract the docstring of the given objects, inserting them into the page source under a suitable :rst:dir:`py:module`, :rst:dir:`py:class` etc.  directive."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:115
msgid "Just as :rst:dir:`py:class` respects the current :rst:dir:`py:module`, :rst:dir:`autoclass` will also do so.  Likewise, :rst:dir:`automethod` will respect the current :rst:dir:`py:class`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:124
msgid "Document a module, class or exception.  All three directives will by default only insert the docstring of the object itself::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:129
msgid "will produce source like this::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:135
msgid "The \"auto\" directives can also contain content of their own, it will be inserted into the resulting non-auto directive source after the docstring (but before any automatic member documentation)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:139
msgid "Therefore, you can also mix automatic and non-automatic member documentation, like so::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:150
msgid "Options"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:154
msgid "If set, autodoc will generate document for the members of the target module, class or exception."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:157
msgid "For example::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:162
msgid "will document all module members (recursively), and ::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:167
msgid "will document all class member methods and properties."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:169
msgid "By default, autodoc will not generate document for the members that are private, not having docstrings, inherited from super class, or special members."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:173
msgid "For modules, ``__all__`` will be respected when looking for members unless you give the ``ignore-module-all`` flag option.  Without ``ignore-module-all``, the order of the members will also be the order in ``__all__``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:178
msgid "You can also give an explicit list of members; only these will then be documented::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:187
msgid "If set, autodoc will also generate document for the members not having docstrings::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:197
msgid "If set, autodoc will also generate document for the private members (that is, those named like ``_private`` or ``__private``)::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:204
#: ../../sphinx/doc/usage/extensions/autodoc.rst:225
msgid "It can also take an explicit list of member names to be documented as arguments::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:212
msgid "The option can now take arguments."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:218
msgid "If set, autodoc will also generate document for the special members (that is, those named like ``__special__``)::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:234
msgid "The option can now take arguments"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:237
msgid "**Options and advanced usage**"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:239
msgid "If you want to make the ``members`` option (or other options described below) the default, see :confval:`autodoc_default_options`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:244
msgid "You can use a negated form, :samp:`'no-{flag}'`, as an option of autodoc directive, to disable it temporarily.  For example::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:252
msgid "You can use autodoc directive options to temporarily override or extend default options which takes list as an input. For example::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:259
msgid "The default options can be overridden or extended temporarily."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:262
msgid "autodoc considers a member private if its docstring contains ``:meta private:`` in its :ref:`info-field-lists`. For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:276
msgid "autodoc considers a member public if its docstring contains ``:meta public:`` in its :ref:`info-field-lists`, even if it starts with an underscore. For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:291
msgid "autodoc considers a variable member does not have any default value if its docstring contains ``:meta hide-value:`` in its :ref:`info-field-lists`. Example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:301
msgid "For classes and exceptions, members inherited from base classes will be left out when documenting all members, unless you give the ``inherited-members`` option, in addition to ``members``::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:309
msgid "This can be combined with ``undoc-members`` to document *all* available members of the class or module."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:312
msgid "It can take an ancestor class not to document inherited members from it. By default, members of ``object`` class are not documented.  To show them all, give ``None`` to the option."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:316
msgid "For example; If your class ``Foo`` is derived from ``list`` class and you don't want to document ``list.__len__()``, you should specify a option ``:inherited-members: list`` to avoid special members of list class."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:321
msgid "Another example; If your class Foo has ``__str__`` special method and autodoc directive has both ``inherited-members`` and ``special-members``, ``__str__`` will be documented as in the past, but other special method that are not implemented in your class ``Foo``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:326
msgid "Since v5.0, it can take a comma separated list of ancestor classes.  It allows to suppress inherited members of several classes on the module at once by specifying the option to :rst:dir:`automodule` directive."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:330
msgid "Note: this will lead to markup errors if the inherited members come from a module whose docstrings are not reStructuredText formatted."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:337
msgid "It takes an ancestor class name as an argument."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:341
msgid "It takes a comma separated list of ancestor class names."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:343
msgid "It's possible to override the signature for explicitly documented callable objects (functions, methods, classes) with the regular syntax that will override the signature gained from introspection::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:351
msgid "This is useful if the signature from the method is hidden by a decorator."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:355
msgid "The :rst:dir:`automodule`, :rst:dir:`autoclass` and :rst:dir:`autoexception` directives also support a flag option called ``show-inheritance``.  When given, a list of base classes will be inserted just below the class signature (when used with :rst:dir:`automodule`, this will be inserted for every class that is documented in the module)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:363
msgid "All autodoc directives support the ``no-index`` flag option that has the same effect as for standard :rst:dir:`py:function` etc. directives: no index entries are generated for the documented object (and all autodocumented members)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:370
msgid ":rst:dir:`automodule` also recognizes the ``synopsis``, ``platform`` and ``deprecated`` options that the standard :rst:dir:`py:module` directive supports."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:376
msgid ":rst:dir:`automodule` and :rst:dir:`autoclass` also has an ``member-order`` option that can be used to override the global value of :confval:`autodoc_member_order` for one directive."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:382
msgid "The directives supporting member documentation also have a ``exclude-members`` option that can be used to exclude single member names from documentation, if all members are to be documented."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:388
msgid "In an :rst:dir:`automodule` directive with the ``members`` option set, only module members whose ``__module__`` attribute is equal to the module name as given to ``automodule`` will be documented.  This is to prevent documentation of imported classes or functions.  Set the ``imported-members`` option if you want to prevent this behavior and document all available members.  Note that attributes from imported modules will not be documented, because attribute documentation is discovered by parsing the source file of the current module."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:399
msgid "Add a list of modules in the :confval:`autodoc_mock_imports` to prevent import errors to halt the building process when some external dependencies are not importable at build time."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:405
msgid "As a hint to autodoc extension, you can put a ``::`` separator in between module name and object name to let autodoc know the correct module name if it is ambiguous. ::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:411
msgid ":rst:dir:`autoclass` also recognizes the ``class-doc-from`` option that can be used to override the global value of :confval:`autoclass_content`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:423
msgid "These work exactly like :rst:dir:`autoclass` etc., but do not offer the options used for automatic member documentation."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:426
msgid ":rst:dir:`autodata` and :rst:dir:`autoattribute` support the ``annotation`` option.  The option controls how the value of variable is shown.  If specified without arguments, only the name of the variable will be printed, and its value is not shown::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:434
msgid "If the option specified with arguments, it is printed after the name as a value of the variable::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:440
msgid "By default, without ``annotation`` option, Sphinx tries to obtain the value of the variable and print it after the name."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:443
msgid "The ``no-value`` option can be used instead of a blank ``annotation`` to show the type hint but not the value::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:449
msgid "If both the ``annotation`` and ``no-value`` options are used, ``no-value`` has no effect."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:452
msgid "For module data members and class attributes, documentation can either be put into a comment with special formatting (using a ``#:`` to start the comment instead of just ``#``), or in a docstring *after* the definition.  Comments need to be either on a line of their own *before* the definition, or immediately after the assignment *on the same line*.  The latter form is restricted to one line only."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:459
msgid "This means that in the following class definition, all attributes can be autodocumented::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:481
msgid ":rst:dir:`autodata` and :rst:dir:`autoattribute` can now extract docstrings."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:484
msgid "Comment docs are now allowed on the same line after an assignment."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:486
msgid ":rst:dir:`autodata` and :rst:dir:`autoattribute` have an ``annotation`` option."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:489
msgid ":rst:dir:`autodecorator` added."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:491
msgid ":rst:dir:`autoproperty` added."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:493
msgid ":rst:dir:`autodata` and :rst:dir:`autoattribute` now have a ``no-value`` option."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:499
msgid "If you document decorated functions or methods, keep in mind that autodoc retrieves its docstrings by importing the module and inspecting the ``__doc__`` attribute of the given function or method.  That means that if a decorator replaces the decorated function with another, it must copy the original ``__doc__`` to the new function."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:507
msgid "Configuration"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:509
msgid "There are also config values that you can set:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:513
msgid "This value selects what content will be inserted into the main body of an :rst:dir:`autoclass` directive.  The possible values are:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:516
msgid "``\"class\"``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:517
msgid "Only the class' docstring is inserted.  This is the default.  You can still document ``__init__`` as a separate method using :rst:dir:`automethod` or the ``members`` option to :rst:dir:`autoclass`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:520
msgid "``\"both\"``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:521
msgid "Both the class' and the ``__init__`` method's docstring are concatenated and inserted."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:523
msgid "``\"init\"``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:524
msgid "Only the ``__init__`` method's docstring is inserted."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:528
msgid "If the class has no ``__init__`` method or if the ``__init__`` method's docstring is empty, but the class has a ``__new__`` method's docstring, it is used instead."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:536
msgid "This value selects how the signature will be displayed for the class defined by :rst:dir:`autoclass` directive.  The possible values are:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:539
msgid "``\"mixed\"``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:540
msgid "Display the signature with the class name."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:541
msgid "``\"separated\"``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:542
msgid "Display the signature as a method."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:544
msgid "The default is ``\"mixed\"``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:550
msgid "This value selects if automatically documented members are sorted alphabetical (value ``'alphabetical'``), by member type (value ``'groupwise'``) or by source order (value ``'bysource'``).  The default is alphabetical."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:555
msgid "Note that for source order, the module must be a Python module with the source code available."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:559
msgid "Support for ``'bysource'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:564
msgid "This value is a list of autodoc directive flags that should be automatically applied to all autodoc directives.  The supported flags are ``'members'``, ``'undoc-members'``, ``'private-members'``, ``'special-members'``, ``'inherited-members'``, ``'show-inheritance'``, ``'ignore-module-all'`` and ``'exclude-members'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:574
msgid "Integrated into :confval:`autodoc_default_options`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:578
msgid "The default options for autodoc directives.  They are applied to all autodoc directives automatically.  It must be a dictionary which maps option names to the values.  For example::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:590
msgid "Setting ``None`` or ``True`` to the value is equivalent to giving only the option name to the directives."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:593
msgid "The supported options are ``'members'``, ``'member-order'``, ``'undoc-members'``, ``'private-members'``, ``'special-members'``, ``'inherited-members'``, ``'show-inheritance'``, ``'ignore-module-all'``, ``'imported-members'``, ``'exclude-members'``, ``'class-doc-from'`` and ``'no-value'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:601
msgid "Accepts ``True`` as a value."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:604
msgid "Added ``'imported-members'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:607
msgid "Added ``'class-doc-from'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:610
msgid "Added ``'no-value'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:615
msgid "Functions imported from C modules cannot be introspected, and therefore the signature for such functions cannot be automatically determined.  However, it is an often-used convention to put the signature into the first line of the function's docstring."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:620
msgid "If this boolean value is set to ``True`` (which is the default), autodoc will look at the first line of the docstring for functions and methods, and if it looks like a signature, use the line as the signature and remove it from the docstring content."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:625
msgid "autodoc will continue to look for multiple signature lines, stopping at the first line that does not look like a signature. This is useful for declaring overloaded function signatures."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:632
msgid "Support overloaded signatures"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:636
msgid "Overloaded signatures do not need to be separated by a backslash"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:640
msgid "This value contains a list of modules to be mocked up. This is useful when some external dependencies are not met at build time and break the building process. You may only specify the root package of the dependencies themselves and omit the sub-modules:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:649
msgid "Will mock all imports under the ``django`` package."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:653
msgid "This config value only requires to declare the top-level modules that should be mocked."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:659
msgid "This value controls how to represent typehints.  The setting takes the following values:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:662
msgid "``'signature'`` -- Show typehints in the signature (default)"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:663
msgid "``'description'`` -- Show typehints as content of the function or method The typehints of overloaded functions or methods will still be represented in the signature."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:666
msgid "``'none'`` -- Do not show typehints"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:667
msgid "``'both'`` -- Show typehints in the signature and as content of the function or method"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:670
msgid "Overloaded functions or methods will not have typehints included in the description because it is impossible to accurately represent all possible overloads as a list of parameters."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:677
msgid "New option ``'description'`` is added."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:681
msgid "New option ``'both'`` is added."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:685
msgid "This value controls whether the types of undocumented parameters and return values are documented when ``autodoc_typehints`` is set to ``description``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:688
msgid "The default value is ``\"all\"``, meaning that types are documented for all parameters and return values, whether they are documented or not."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:691
msgid "When set to ``\"documented\"``, types will only be documented for a parameter or a return value that is already documented by the docstring."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:694
msgid "With ``\"documented_params\"``, parameter types will only be annotated if the parameter is documented in the docstring. The return type is always annotated (except if it is ``None``)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:702
msgid "New option ``'documented_params'`` is added."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:706
msgid "A dictionary for users defined `type aliases`__ that maps a type name to the full-qualified object name.  It is used to keep type aliases not evaluated in the document.  Defaults to empty (``{}``)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:710
msgid "The type aliases are only available if your program enables :pep:`Postponed Evaluation of Annotations (PEP 563) <563>` feature via ``from __future__ import annotations``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:714
msgid "For example, there is code using a type alias::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:723
msgid "If ``autodoc_type_aliases`` is not set, autodoc will generate internal mark-up from this code as following::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:730
msgid "If you set ``autodoc_type_aliases`` as ``{'AliasType': 'your.module.AliasType'}``, it generates the following document internally::"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:743
msgid "This value controls the format of typehints.  The setting takes the following values:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:746
msgid "``'fully-qualified'`` -- Show the module name and its name of typehints"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:747
msgid "``'short'`` -- Suppress the leading module names of the typehints (e.g. ``io.StringIO`` -> ``StringIO``)  (default)"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:754
msgid "The default setting was changed to ``'short'``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:758
msgid "If True, the default argument values of functions will be not evaluated on generating document.  It preserves them as is in the source code."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:763
msgid "Added as an experimental feature.  This will be integrated into autodoc core in the future."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:768
msgid "This value controls the behavior of :option:`sphinx-build --fail-on-warning` during importing modules. If ``False`` is given, autodoc forcedly suppresses the error if the imported module emits warnings.  By default, ``True``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:773
msgid "This option now has no effect as :option:`!--fail-on-warning` no longer exits early."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:779
msgid "This value controls the docstrings inheritance. If set to True the docstring for classes or methods, if not explicitly set, is inherited from parents."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:783
msgid "The default is ``True``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:790
msgid ":mod:`autodoc` supports to suppress warning messages via :confval:`suppress_warnings`.  It allows following warnings types in addition:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:794
msgid "autodoc"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:795
msgid "autodoc.import_object"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:799
msgid "Docstring preprocessing"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:801
msgid "autodoc provides the following additional events:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:807
msgid "Emitted when autodoc has read and processed a docstring.  *lines* is a list of strings -- the lines of the processed docstring -- that the event handler can modify **in place** to change what Sphinx puts into the output."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:0
msgid "Parameters"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:811
#: ../../sphinx/doc/usage/extensions/autodoc.rst:830
#: ../../sphinx/doc/usage/extensions/autodoc.rst:842
#: ../../sphinx/doc/usage/extensions/autodoc.rst:871
#: ../../sphinx/doc/usage/extensions/autodoc.rst:903
msgid "the Sphinx application object"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:812
#: ../../sphinx/doc/usage/extensions/autodoc.rst:843
#: ../../sphinx/doc/usage/extensions/autodoc.rst:904
msgid "the type of the object which the docstring belongs to (one of ``\"module\"``, ``\"class\"``, ``\"exception\"``, ``\"function\"``, ``\"method\"``, ``\"attribute\"``)"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:815
#: ../../sphinx/doc/usage/extensions/autodoc.rst:846
#: ../../sphinx/doc/usage/extensions/autodoc.rst:872
#: ../../sphinx/doc/usage/extensions/autodoc.rst:907
msgid "the fully qualified name of the object"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:816
#: ../../sphinx/doc/usage/extensions/autodoc.rst:831
#: ../../sphinx/doc/usage/extensions/autodoc.rst:847
#: ../../sphinx/doc/usage/extensions/autodoc.rst:873
#: ../../sphinx/doc/usage/extensions/autodoc.rst:908
msgid "the object itself"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:817
#: ../../sphinx/doc/usage/extensions/autodoc.rst:848
#: ../../sphinx/doc/usage/extensions/autodoc.rst:911
msgid "the options given to the directive: an object with attributes ``inherited_members``, ``undoc_members``, ``show_inheritance`` and ``no-index`` that are true if the flag option of same name was given to the auto directive"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:821
msgid "the lines of the docstring, see above"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:827
msgid "Emitted before autodoc formats a signature for an object. The event handler can modify an object to change its signature."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:832
msgid "a boolean indicates an object is bound method or not"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:838
msgid "Emitted when autodoc has formatted a signature for an object. The event handler can return a new tuple ``(signature, return_annotation)`` to change what Sphinx puts into the output."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:852
msgid "function signature, as a string of the form ``\"(parameter_1, parameter_2)\"``, or ``None`` if introspection didn't succeed and signature wasn't specified in the directive."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:855
msgid "function return annotation as a string of the form ``\" -> annotation\"``, or ``None`` if there is no return annotation"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:858
msgid "The :mod:`sphinx.ext.autodoc` module provides factory functions for commonly needed docstring processing in event :event:`autodoc-process-docstring`:"
msgstr ""

#: ../../../../../../../opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/sphinx/ext/autodoc/__init__.py:docstring of sphinx.ext.autodoc.cut_lines:1
msgid "Return a listener that removes the first *pre* and last *post* lines of every docstring.  If *what* is a sequence of strings, only docstrings of a type in *what* will be processed."
msgstr ""

#: ../../../../../../../opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/sphinx/ext/autodoc/__init__.py:docstring of sphinx.ext.autodoc.cut_lines:5
msgid "Use like this (e.g. in the ``setup()`` function of :file:`conf.py`)::"
msgstr ""

#: ../../../../../../../opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/sphinx/ext/autodoc/__init__.py:docstring of sphinx.ext.autodoc.cut_lines:10
msgid "This can (and should) be used in place of :confval:`automodule_skip_lines`."
msgstr ""

#: ../../../../../../../opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/sphinx/ext/autodoc/__init__.py:docstring of sphinx.ext.autodoc.between:1
msgid "Return a listener that either keeps, or if *exclude* is True excludes, lines between lines that match the *marker* regular expression.  If no line matches, the resulting docstring would be empty, so no change will be made unless *keepempty* is true."
msgstr ""

#: ../../../../../../../opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/sphinx/ext/autodoc/__init__.py:docstring of sphinx.ext.autodoc.between:6
msgid "If *what* is a sequence of strings, only docstrings of a type in *what* will be processed."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:866
msgid "Emitted when autodoc has read and processed a class to determine the base-classes.  *bases* is a list of classes that the event handler can modify **in place** to change what Sphinx puts into the output.  It's emitted only if ``show-inheritance`` option given."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:874
msgid "the options given to the class directive"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:875
msgid "the list of base classes signature. see above."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:880
msgid "``bases`` can contain a string as a base class name. It will be processed as reStructuredText."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:885
msgid "Skipping members"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:887
msgid "autodoc allows the user to define a custom method for determining whether a member should be included in the documentation by using the following event:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:894
msgid "Emitted when autodoc has to decide whether a member should be included in the documentation.  The member is excluded if a handler returns ``True``.  It is included if the handler returns ``False``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:898
msgid "If more than one enabled extension handles the ``autodoc-skip-member`` event, autodoc will use the first non-``None`` value returned by a handler. Handlers should return ``None`` to fall back to the skipping behavior of autodoc and other enabled extensions."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:909
msgid "a boolean indicating if autodoc will skip this member if the user handler does not override the decision"
msgstr ""
